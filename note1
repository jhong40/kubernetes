kubectl exec -it stackstorm-st2actionrunner-748d8558dd-7hsn5 -- /bin/bash


kubectl get pv

NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                             STORAGECLASS       REASON   AGE
pvc-1629268b-e5a8-4775-b81f-80c990f4e2ce   8Gi        RWO            Delete           Bound    default/data-crowd-postgresql-0   do-block-storage            41m
pvc-18e3d3cf-eca6-4d87-8f48-c0588458bdc2   10Gi       RWO            Delete           Bound    default/crowd-vol-crowd-0         do-block-storage            41m

$ kubectl get pvc
NAME                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE
crowd-vol-crowd-0         Bound    pvc-18e3d3cf-eca6-4d87-8f48-c0588458bdc2   10Gi       RWO            do-block-storage   41m
data-crowd-postgresql-0   Bound    pvc-1629268b-e5a8-4775-b81f-80c990f4e2ce   8Gi        RWO            do-block-storage   41m

$ kubectl delete pvc crowd-vol-crowd-0 data-crowd-postgresql-0
persistentvolumeclaim "crowd-vol-crowd-0" deleted
persistentvolumeclaim "data-crowd-postgresql-0" deleted

helm install crowd crowd-helm-chart --set ingress.tlssecret=mysecret --debug --dry-run  > crowd.txt
helm delete crowd


# create tls secret
kubectl create secret tls mysecret --key abc.key --cert abc.crt

# ingress using the tls secret
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jira
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - abc.xyz.com
    secretName: mysecret
  rules:
  - host: abc.xyz.com
    http:
      paths:
      - backend:
          serviceName: myapp
          servicePort: 80
        path: /myapp


openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout /tmp/www.key -out /tmp/www.crt

ngnix-ingress
https://kubernetes.github.io/ingress-nginx

(not found)
https://helm.nginx.com/stable

-- Postgresql

postgresql.postgresql.svc.cluster.local - Read/Write connection
To get the password for "user1" run:

export POSTGRES_PASSWORD=$(kubectl get secret --namespace postgresql postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode)

To connect to your database run the following command:

kubectl run postgresql-client --rm --tty -i --restart='Never' --namespace postgresql --image docker.io/postgres:10 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql --host postgresql -U user1 -d userdb -p 5432

To connect to your database from outside the cluster execute the following commands:

export NODE_IP=$(kubectl get nodes --namespace postgresql -o jsonpath="{.items[0].status.addresses[0].address}")
export NODE_PORT=$(kubectl get --namespace postgresql -o jsonpath="{.spec.ports[0].nodePort}" services postgresql)
PGPASSWORD="$POSTGRES_PASSWORD" psql --host $NODE_IP --port $NODE_PORT -U user1 -d userdb

# docker registry 
docker run -d \
  -p 5000:5000 \
  --restart=always \
  --name registry \
  -v /home/guangshengliu/7-22/registry:/var/lib/registry \
  registry:2
  
  docker run -d \
  --restart=always \
  --name registry \
  -v "$(pwd)"/certs:/certs \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  -p 443:443 \
  registry:2
  
###   
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm install my-release ingress-nginx/ingress-nginx

### stackstorm
helm dependency update stackstorm-helm-chart  #update the chart dependency
helm install aaastack stackstorm-helm-chart   #install stackstorm
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx  #add nginx in repo
helm ls
helm install my-nginx ingress-nginx/ingress-nginx  #install nginx

### Ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.

https://ngrok.com/product




