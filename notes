/etc/hostname
kubemaster
/etc/hosts
127.0.0.1 kubemaster

Host-only Network
Adapter 2 for Host-Only network

/etc/fstab #comment out swap or swap -a


kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=172.16.110.73

kubeadm join 172.16.110.73:6443 --token f64rrh.pxva1wccuqhjo8gh \
    --discovery-token-ca-cert-hash sha256:282c3908b7f102a45233760a0a6937bb0287dc95a5f77417e97393e25b146e8d 


export KUBECONFIG=/etc/kubernetes/admin.conf



master - 172.16.110.73
node1 - 172.16.110.75
node2 - 172.16.110.113

kubectl log pod1 --timestamps
kubectl log --since=5s  # 1h
kubectl explain pod.sepc  --recursive

kubect diff me.yml    # compare the me.yaml with the kube resource deployed

```
kubectl debug   # distroless images, crashed container, mini pod disruption
kubectl mypod -it nginx-pod --image=busybox --target=nginx-container  # 
  cd /prod
  cd /1/root/etc/nginx   # cat nginx.conf
```




kubectl run nginx --image=nginx  #create a deployment nginx 
kubectl get pods
kubectl get pods -o wide
kubectl describe pods
kubectl create -f pod-def.yml

kubectl get pods -o wide
NAME                     READY   STATUS    RESTARTS   AGE   IP                NODE        NOMINATED NODE   READINESS GATES
myapp-pod                1/1     Running   0          78s   192.168.205.193   kubenode1   <none>           <none>
nginx-6db489d4b7-mwz8w   1/1     Running   0          11m   192.168.35.66     kubenode2   <none>           <none>

kubectl create -f rs-def.yml
kubectl get rs                    #kubectl get replicaset
kubectl describe rs 
kubectl delete rs frontend                    #rs or replicaset

kubectl create -f rc-def.yml                  
kubectl get rc                                #kubectl get replicationcontroller
kubectl describe rc

kubectl create -f dp-def.yml
kubectl get deployments
kubectl apply -f dp-def.yml
kubectl set image deploy/myapp-deployment nginx=nginx:1.9.1
kubectl describe deployment
kubectl rollout status deployment/myapp-deployment
kubectl rollout history deployment/myapp-deployment
kubectl rollout undo deployment/myapp-deployment


kubectl get rs new-rs -o yaml  #creates yml out of the existing rs
kubectl scale rs new-rs --replicas=5



root@kubemaster:~# kubectl create -f dp-def.yml --record 
deployment.apps/myapp-deployment created
root@kubemaster:~# kubectl rollout history deployment/myapp-deployment
deployment.apps/myapp-deployment 
REVISION  CHANGE-CAUSE
1         kubectl create --filename=dp-def.yml --record=true



#scale
1. replicas: 6 (3-init)
   kubectl replace -f rs-def.yml
2. kubectl scale --replicas=6 -f rs-def.yml  #add scale parm and the same yml file
3. kubectl scale --replicas=6 replicaset myapp-replicaset


# cat pod-def.yml
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
    type: front-end
    
spec:
  containers:
    - name: nginx-container
      image: nginx

root@kubemaster:~# cat rs-def.yml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myapp-rs 
  labels:
    app: myapp 
    type: front-end
spec:
  replicas: 3
  selector:
    matchLabels:
      type: front-end
  template:
    metadata:
      labels:
        app: myapp-pod 
        type: front-end
    spec:
      containers:
      - name: nginx-container
        image: nginx

root@kubemaster:~# cat rc-def.yml
apiVersion: v1
kind: ReplicationController
metadata:
  name: myapp-rc 
  labels:
    app: myapp 
    type: front-end 
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: myapp-pod 
        type: front-end
    spec:
      containers:
      - name: nginx-container
        image: nginx

root@kubemaster:~# cat dp-def.yml
apiVersion: apps/v1
kind: Deployment 
metadata:
  name: myapp-deployment
  labels:
    app: myapp 
    type: front-end
spec:
  replicas: 3

  selector:
    matchLabels:
      app: myapp 

  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp

    spec:
      containers:
      - name: nginx-container
        image: nginx


---------------------------------------------------------------------------------------------
root@kubemaster:~# kubectl get pods
NAME                                READY   STATUS             RESTARTS   AGE
myapp-deployment-544f87f4f-mttjb    1/1     Running            0          4m7s
myapp-deployment-544f87f4f-r2k2h    1/1     Running            0          4m11s
myapp-deployment-544f87f4f-tjts5    1/1     Running            0          4m11s
myapp-deployment-685ddbd974-kccd4   0/1     ImagePullBackOff   0          90s
myapp-deployment-685ddbd974-nq85k   0/1     ImagePullBackOff   0          90s

root@kubemaster:~# kubectl get pods -n kube-system
NAME                                      READY   STATUS             RESTARTS   AGE
calico-kube-controllers-55754f75c-qvjf8   1/1     Running            3          3d2h
calico-node-gbnc2                         1/1     Running            11         3d2h
calico-node-hstz2                         1/1     Running            11         3d2h
calico-node-tk442                         1/1     Running            8          3d2h
coredns-5644d7b6d9-rsvj5                  0/1     CrashLoopBackOff   90         3d2h
coredns-5644d7b6d9-z5ffn                  0/1     CrashLoopBackOff   90         3d2h
etcd-kubemaster                           1/1     Running            6          3d2h
kube-apiserver-kubemaster                 1/1     Running            11         3d2h
kube-controller-manager-kubemaster        1/1     Running            16         3d2h
kube-proxy-2bg8x                          1/1     Running            3          3d2h
kube-proxy-jhlpm                          1/1     Running            12         3d2h
kube-proxy-nrdjt                          1/1     Running            3          3d2h
kube-scheduler-kubemaster                 1/1     Running            14         3d2h

# kubectl edit pod myapp-deployment-748f65c8f7-5rbtq


### Expose Service #####
1. Create a service - Exposing Pod
kubectl expose pod nginx --name nginx-svc --port=80 --target-port=80
2. Create a service - Expose Deployment
kubectl expose deployment nginx --name nginx-dep-svc --port=80 --target-port=8000
3. Create a NodePort Service
kubectl expose deployment nginx --name nodeport-svc --port=80 --target-port=8000 --type=NodePort

